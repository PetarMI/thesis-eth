""" Search strategy planner

This script is the entry point of the search strategy planning.

* Calls the correct search strategy function so it can be
  thought of as a dispatcher.

Public functions:
    * get_search_plan - returns search plan generated by the specified algorithm
"""

from argparse import ArgumentParser
from fuzzer.common import file_reader as fr
from fuzzer.controllers import search_strategies as strategies


def get_search_plan(depth: int, algo: str) -> list:
    """ Function that calls the correct search algorithm """
    nets = fr.get_networks()
    verify_depth(depth, nets)

    if algo == "bfs":
        search_plan = strategies.bfs(depth, nets)
    else:
        raise ValueError("Unknown search algorithm")

    return search_plan


def verify_depth(depth: int, nets: list):
    if depth > len(nets):
        raise ValueError("Depth is higher than number of nets")


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument("-d", "--depth", dest="depth",
                        help="The max depth we are checking for failed links")
    parser.add_argument("-a", "--algo", dest="algo",
                        help="Search algorithm to use")
    args = parser.parse_args()

    if not (args.depth and args.algo):
        raise ValueError("Forgot to specify search depth or algorithm")

    search_plan = get_search_plan(int(args.depth), args.algo)

    for s in search_plan:
        print(s)
